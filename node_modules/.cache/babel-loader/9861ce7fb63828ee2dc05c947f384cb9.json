{"ast":null,"code":"var _jsxFileName = \"/Users/nisarg/Desktop/spacestagram/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Loading from \"./components/Preloader/Loading\";\nimport Sidebar from \"./components/Sidebar\";\nimport Navbar from \"./components/Navbar\";\nimport Pageone from \"./components/Pageone/Pageone\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [loading, setloading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    setloading(true);\n    setTimeout(() => {\n      setloading(false);\n    }, 0);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n          isOpen: isOpen,\n          toggle: toggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n          toggle: toggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Pageone, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XTWzN6jRapClbuZGXcrs9VWSyI0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nisarg/Desktop/spacestagram/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Loading","Sidebar","Navbar","Pageone","App","loading","setloading","isOpen","setIsOpen","toggle","setTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,OAAP,MAAoB,8BAApB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMa,MAAM,GAAG,MAAM;AACnBD,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACD,GAFD;;AAIAV,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAI,IAAAA,UAAU,CAAC,MAAM;AACfJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAFS,EAEP,CAFO,CAAV;AAGD,GALQ,EAKN,EALM,CAAT;AAOA,sBACE,QAAC,MAAD;AAAA,2BACE;AAAA,gBACGD,OAAO,gBACN;AAAA,+BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADF,uBADM,gBAKN;AAAA,gCACE,QAAC,OAAD;AAAS,UAAA,MAAM,EAAEE,MAAjB;AAAyB,UAAA,MAAM,EAAEE;AAAjC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAQ,UAAA,MAAM,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFF,eAIE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AANJ;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAjCQL,G;;KAAAA,G;AAmCT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Loading from \"./components/Preloader/Loading\";\nimport Sidebar from \"./components/Sidebar\";\nimport Navbar from \"./components/Navbar\";\nimport Pageone from \"./components/Pageone/Pageone\";\n\nfunction App() {\n  const [loading, setloading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    setloading(true);\n    setTimeout(() => {\n      setloading(false);\n    }, 0);\n  }, []);\n\n  return (\n    <Router>\n      <>\n        {loading ? (\n          <>\n            <Loading />\n          </>\n        ) : (\n          <>\n            <Sidebar isOpen={isOpen} toggle={toggle} />\n            <Navbar toggle={toggle} />\n\n            <Pageone />\n          </>\n        )}\n      </>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}